---
name: Snapshot Manager CI
permissions:
  contents: read
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  python-basic-tests:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Run apt-get update
        run: sudo apt-get -q update
      - name: Install Ubuntu snapm deps
        env:
          DEBIAN_FRONTEND: noninteractive
        run: >
          sudo apt-get install -y
          python3-pytest
          python3-pytest-subtests
          python3-pycodestyle
          python3-coverage
          python3-flake8
          python3-dateutil
          python3-packaging
          python3-wcwidth
          pycodestyle
          libfaketime
          faketime
          flake8
          pylint
          bandit
          lvm2
      - name: Install pip dependencies
        run: >
          sudo pip install dbus-client-gen dbus-python-client-gen justbytes
      - name: Install Snapshot Manager
        run: >
          sudo pip install -v .
      - name: Copy configuration to /etc
        run: >
          sudo cp -r etc/snapm /etc
      - name: Copy systemd units to /usr/lib/systemd/system
        run: >
          sudo cp systemd/* /usr/lib/systemd/system
      - name: Reload systemd
        run: >
          sudo systemctl daemon-reload
      - name: Check out boom
        run: git clone https://github.com/snapshotmanager/boom-boot
        working-directory: /var/tmp
      - name: Install boom
        run: sudo pip install -v .
        working-directory: /var/tmp/boom-boot
      - name: Create boom configuration
        run: |
          sudo mkdir /boot/boom
          sudo mkdir /boot/boom/cache
          sudo mkdir /boot/boom/hosts
          sudo mkdir /boot/boom/profiles
          sudo mkdir -p /boot/loader/entries
          sudo cp /var/tmp/boom-boot/examples/boom.conf /boot/boom
          # Create profiles for kernel variants seen in CI
          sudo boom profile create --from-host --uname-pattern generic --initramfs-pattern "/initrd.img-%{version}" --kernel-pattern "/vmlinuz-%{version}"
          sudo boom profile create --from-host --uname-pattern azure --initramfs-pattern "/initrd.img-%{version}" --kernel-pattern "/vmlinuz-%{version}"
      - name: Install Ubuntu stratisd deps
        env:
          DEBIAN_FRONTEND: noninteractive
        run: >
          sudo apt-get install -y
          asciidoc-base
          clang
          curl
          libblkid-dev
          libcryptsetup-dev
          libdbus-1-dev
          libdevmapper-dev
          libsystemd-dev
          libudev-dev
          make
          sudo
          thin-provisioning-tools
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
      - name: Check out stratisd
        run: git clone https://github.com/stratis-storage/stratisd -b stratisd-v3.8.0
        working-directory: /var/tmp
      - name: Build stratisd
        run: make build-all
        working-directory: /var/tmp/stratisd
      - name: Install and enable stratisd
        run: |
          sudo make install
          sudo systemctl enable --now stratisd
        working-directory: /var/tmp/stratisd
      - name: Check out stratis-cli
        run: git clone https://github.com/stratis-storage/stratis-cli -b v3.8.0
        working-directory: /var/tmp
      - name: Install stratis-cli
        run: sudo pip install -v .
        working-directory: /var/tmp/stratis-cli
      - name: Check PyCodestyle
        run: >
          pycodestyle snapm --ignore E501,E203,W503
      - name: Check Flake8
        run: >
          flake8 snapm
      - name: Check pylint
        run: >
          pylint snapm
      - name: Run bandit
        run: >
          bandit --skip B101,B303,B404,B603 -r snapm
      - name: Run test suite with coverage
        run: >
          sudo python3-coverage run /usr/bin/pytest-3 --log-level=debug -v tests/
      - name: Report coverage
        run: >
          python3-coverage report -m --include "./snapm/*"
  virt_tests:
    concurrency:
      group: virt-tests-${{ github.workflow }}-${{ github.ref }}-${{ matrix.firmware }}-${{ matrix.storage }}-${{ matrix.base_os }}
      cancel-in-progress: true
    timeout-minutes: 45
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        firmware: [bios, uefi]
        storage: [lvm, lvm-thin]
        base_os: [fedora41, fedora42, centos-stream9, centos-stream10]
    steps:
      - uses: actions/checkout@v4
      - name: Install virt dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
          BASE_OS: ${{ matrix.base_os }}
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y qemu-kvm qemu-utils seabios ovmf libvirt-daemon-system libvirt-clients libosinfo-bin virtinst wget expect
          sudo systemctl enable --now libvirtd
          # Ensure the default libvirt network is active
          sudo virsh net-start default || true
          sudo virsh net-autostart default || true
          # Log host virtualization capabilities
          sudo virt-host-validate qemu || true
          if [[ "$BASE_OS" == fedora* ]]; then
            # fedora: add fedora 41/42
            OSINFO_COMMIT="cd15af7d8746eba99267d5fa1ac99ed9532fcbc4"
            sudo wget -O /usr/share/osinfo/os/fedoraproject.org/fedora-41.xml https://gitlab.com/libosinfo/osinfo-db/-/raw/${OSINFO_COMMIT}/data/os/fedoraproject.org/fedora-41.xml.in
            sudo wget -O /usr/share/osinfo/os/fedoraproject.org/fedora-42.xml https://gitlab.com/libosinfo/osinfo-db/-/raw/${OSINFO_COMMIT}/data/os/fedoraproject.org/fedora-42.xml.in
            # Sanity-check that osinfo picks up the new definitions
            osinfo-query os short-id=fedora41 -f short-id || { echo "fedora41 not recognized by osinfo" >&2; exit 1; }
            osinfo-query os short-id=fedora42 -f short-id || { echo "fedora42 not recognized by osinfo" >&2; exit 1; }
          fi
      - name: Run virt-tests for target
        env:
          FIRMWARE:    ${{ matrix.firmware }}
          STORAGE:     ${{ matrix.storage }}
          BASE_OS:     ${{ matrix.base_os }}
          REPOSITORY:  ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name || github.repository }}
          REF_NAME:    ${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}
        run: |
          set -euo pipefail
          sudo python3 -m virt_tests \
            --"$FIRMWARE" \
            --storage "$STORAGE" \
            --repo "$REPOSITORY" \
            --ref-name "$REF_NAME" \
            "$BASE_OS"
      - name: Collect libvirt logs (on failure)
        if: failure()
        run: |
          mkdir -p "$RUNNER_TEMP/virt-diag"
          sudo journalctl -u libvirtd -u virtlogd -u virtqemud --no-pager --since "2 hours ago" > "$RUNNER_TEMP/virt-diag/journal.txt" 2>&1 || true
          sudo virsh list --all > "$RUNNER_TEMP/virt-diag/virsh_list.txt" 2>&1 || true
          sudo virsh net-dumpxml default > "$RUNNER_TEMP/virt-diag/net_default.xml" 2>&1 || true
          sudo tar -C /var/log -czf "$RUNNER_TEMP/virt-diag/libvirt.tgz" libvirt || true
          tar -C "$RUNNER_TEMP" -czf "$RUNNER_TEMP/libvirt-logs.tgz" virt-diag || true
          echo "Logs archived to $RUNNER_TEMP/libvirt-logs.tgz"
      - name: Upload logs artifact (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: libvirt-logs-${{ matrix.firmware }}-${{ matrix.storage }}-${{ matrix.base_os }}-${{ github.run_attempt }}
          path: ${{ runner.temp }}/libvirt-logs.tgz
          retention-days: 7
